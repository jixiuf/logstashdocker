# logstash -f logstash1.conf
# more example
# https://www.elastic.co/guide/en/logstash/current/config-examples.html
input {
    # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
    file {
        #File paths must be absolute
        # 使用通配符
        path => "/data/zjh/logs/*info*.log*"
        start_position => beginning # or end
        # Choose where Logstash starts initially reading files: at the
        # beginning or at the end. The default behavior treats files like live
        # streams and thus starts at the end. If you have old data you want to
        # import, set this to beginning.

        # This option only modifies "first contact" situations where a file is
        # new and not seen before, i.e. files that don’t have a current
        # position recorded in a sincedb file read by Logstash. If a file has
        # already been seen before, this option has no effect and the position
        # recorded in the sincedb file will be used.
    }
}
filter {
    # 条件判断  if else == =~
    # https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html#conditionals

    # 2016-05-08_18:20:17 {"logtype":"assets_change","uin":144150665783451816,"key":1,"before":23109,"after":23099,"change":-10,"reason":"zjh_enter_desk","timestamp":1462702817}
    # 只处理 行内含有logtype 的日志
    if "logtype"  in [message] {
        mutate {
            split => { "message" => " " } #将message 字段 按" " split,分折会message 变成一个数组
            # 2016-05-08_18:20:17 {"logtype":"assets_change","uin":144150665783451816,"key":1,"before":23109,"after":23099,"change":-10,"reason":"zjh_enter_desk","timestamp":1462702817}
            # 分成 ["2016-05-08_18:20:17",'{"logtype":"assets_change","uin":144150665783451816,"key":1,"before":23109,"after":23099,"change":-10,"reason":"zjh_enter_desk","timestamp":1462702817}']
        }
        json{
            source => "message[1]" #解析json
        }
        date {
            match => ["message[0]","yyyy-MM-dd_HH:mm:ss"]
            "target" => ["seelogTime"]
            # timezone => "Asia/Shangha"
            locale => "zh"
        }
        date {
            # 如果有timestamp 这个字段 就将其格式化存到 timeFormat上
            match => ["timestamp", "UNIX","UNIX_MS"]
            "target" => ["timeFormat"]
            # timezone => "Asia/Shangha"
            locale => "zh"
        }
        # if [logtype] == "assets_change" {
        #     alter {
        #         add_field => { "doc_id" => "%{uin}_%{timestamp}" }
        #     }
        # }        
    }
    # kv 不好的一点是 ，无法区分string or int
    # kv { 
    #     field_split => ", " # , and empty space
    #     value_split => "="
    # }
}
output {
    # 输出到stdout
    stdout {codec => rubydebug}
    # 可以根据不同的 field 将output 写到不同的目的地
    if [logtype] == "assets_change" {
        if [key] == 1 {
            elasticsearch {
                hosts => ["127.0.0.1:9200"]
                index => "zjh"
                document_type => "assets_change_gold"
                # document_id => [doc_id]
            }
        }else{
            elasticsearch {
                hosts => ["127.0.0.1:9200"]
                index=> "zjh"
                document_type => "assets_change"
                # document_id => [doc_id]
            }
        }
    }if [logtype] == "login" {
        file {
            path => "/tmp/logstash_login.out"
        }    
    }else{
        # do nothing
    }
}